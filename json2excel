#!/bin/bash
//usr/bin/env groovy -cp $HOME/.m2/repository/org/apache/poi/poi/4.0.0/poi-4.0.0.jar:$HOME/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.0.0/poi-ooxml-schemas-4.0.0.jar:$HOME/.m2/repository/org/apache/poi/poi-ooxml/4.0.0/poi-ooxml-4.0.0.jar:$HOME/.m2/repository/org/apache/xmlbeans/xmlbeans/3.0.1/xmlbeans-3.0.1.jar:$HOME/.m2/repository/org/apache/commons/commons-collections4/4.2/commons-collections4-4.2.jar:$HOME/.m2/repository/org/apache/commons/commons-compress/1.18/commons-compress-1.18.jar "$0" $@; exit $?

import groovy.json.JsonSlurper
import org.apache.poi.ss.usermodel.*
import org.apache.poi.xssf.usermodel.*

	def slurper = new JsonSlurper()
	json = slurper.parseText((new File(args[0])).getText())

	Workbook wb = new XSSFWorkbook()
	Font headingFont = wb.createFont();
	headingFont.setBold(true);
	XSSFCellStyle headingStyle = wb.createCellStyle();
	headingStyle.setFont(headingFont);
	json.each{ k,v -> 
		def rows = v
		if(k == 'broadcasts') rows = rows.broadcasts[0] // special case for my data - TODO
		XSSFSheet sheet = (XSSFSheet) wb.createSheet(k)
		def r = 0
		Row row = sheet.createRow(r++)
		row.setRowStyle(headingStyle);
		def c = 0
		def headings = rows.collectMany{it.keySet()}.toSet().toArray()
		headings.each{
			Cell cell = row.createCell(c++);
			cell.setCellValue(it)
		}
		rows.each{ p ->
			row = sheet.createRow(r++)
			c = 0
			headings.each{ h ->
				Cell cell = row.createCell(c++);
				if(p.containsKey(h)) {
					cell.setCellValue(p[h])	        				
				} else {
					cell.setCellValue(' ')	        				
				}
			}
		}	        		
		while(--c >= 0)
		    sheet.autoSizeColumn(c);	        		
	}
	OutputStream fileOut = new FileOutputStream("workbook.xlsx")
	wb.write(fileOut)
